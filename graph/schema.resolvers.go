package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"strconv"

	"github.com/sorrawichYooboon/protocol-golang/graph/model"
)

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context) ([]*model.Movie, error) {
	movies, err := r.Resolver.MovieUsecase.GetAllMovies()
	if err != nil {
		return nil, err
	}
	result := make([]*model.Movie, len(movies))
	for i := range movies {
		result[i] = &model.Movie{
			ID:          strconv.FormatInt(movies[i].ID, 10),
			Title:       movies[i].Title,
			Description: movies[i].Description,
			ReleaseDate: movies[i].ReleaseDate,
		}
	}
	return result, nil
}

// Movie is the resolver for the movie field.
func (r *queryResolver) Movie(ctx context.Context, id string) (*model.Movie, error) {
	idInt, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}
	movie, err := r.Resolver.MovieUsecase.GetMovieByID(idInt)
	if err != nil {
		return nil, err
	}
	return &model.Movie{
		ID:          strconv.FormatInt(movie.ID, 10),
		Title:       movie.Title,
		Description: movie.Description,
		ReleaseDate: movie.ReleaseDate,
	}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
