// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockRepo

import (
	domain "github.com/sorrawichYooboon/go-protocol-api-style/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MovieRepository is an autogenerated mock type for the MovieRepository type
type MovieRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *MovieRepository) GetAll() ([]domain.Movie, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Movie, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Movie); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *MovieRepository) GetByID(id int64) (*domain.Movie, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.Movie, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.Movie); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMovieRepository creates a new instance of MovieRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMovieRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MovieRepository {
	mock := &MovieRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
