// Code generated by wsdl2go. DO NOT EDIT.

package movieservicebinding

import (
	"github.com/fiorix/wsdl2go/soap"
)

// Namespace was auto-generated from WSDL.
var Namespace = "http://example.com/moviesoap"

// NewMovieServicePortType creates an initializes a MovieServicePortType.
func NewMovieServicePortType(cli *soap.Client) MovieServicePortType {
	return &movieServicePortType{cli}
}

// MovieServicePortType was auto-generated from WSDL
// and defines interface for the remote service. Useful for testing.
type MovieServicePortType interface {
	// GetMovie was auto-generated from WSDL.
	GetMovie(GetMovieRequest *GetMovieRequest) (*GetMovieResponse, error)
}

// GetMovieRequest was auto-generated from WSDL.
type GetMovieRequest struct {
	Id *int64 `xml:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty"`
}

// GetMovieResponse was auto-generated from WSDL.
type GetMovieResponse struct {
	Id          *int64  `xml:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty"`
	Title       *string `xml:"title,omitempty" json:"title,omitempty" yaml:"title,omitempty"`
	Description *string `xml:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty"`
	ReleaseDate *string `xml:"releaseDate,omitempty" json:"releaseDate,omitempty" yaml:"releaseDate,omitempty"`
}

// Operation wrapper for GetMovie.
// OperationGetMovieRequest was auto-generated from WSDL.
type OperationGetMovieRequest struct {
	GetMovieRequest *GetMovieRequest `xml:"GetMovieRequest,omitempty" json:"GetMovieRequest,omitempty" yaml:"GetMovieRequest,omitempty"`
}

// Operation wrapper for GetMovie.
// OperationGetMovieResponse was auto-generated from WSDL.
type OperationGetMovieResponse struct {
	GetMovieResponse *GetMovieResponse `xml:"GetMovieResponse,omitempty" json:"GetMovieResponse,omitempty" yaml:"GetMovieResponse,omitempty"`
}

// movieServicePortType implements the MovieServicePortType interface.
type movieServicePortType struct {
	cli *soap.Client
}

// GetMovie was auto-generated from WSDL.
func (p *movieServicePortType) GetMovie(GetMovieRequest *GetMovieRequest) (*GetMovieResponse, error) {
	α := struct {
		OperationGetMovieRequest `xml:"tns:GetMovie"`
	}{
		OperationGetMovieRequest{
			GetMovieRequest,
		},
	}

	γ := struct {
		OperationGetMovieResponse `xml:"GetMovieResponse"`
	}{}
	if err := p.cli.RoundTripWithAction("GetMovie", α, &γ); err != nil {
		return nil, err
	}
	return γ.GetMovieResponse, nil
}
